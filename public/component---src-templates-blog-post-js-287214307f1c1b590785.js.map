{"version":3,"sources":["webpack:///./src/components/blogside.js","webpack:///./src/components/blogpostmodule.js","webpack:///./src/templates/blogPost.js"],"names":["ProjectSide","data","className","allMarkdownRemark","category","map","index","key","fieldValue","edges","post","node","id","to","frontmatter","permalink","title","replace","Post","date","path","excerpt","tag","html","previousPost","nextPost","style","postheading","posttitle","postdate","postcat","postcontent","dangerouslySetInnerHTML","__html","postnavigation","postQuery","BlogPostTemplate","pageContext","markdownRemark","updated","autoExcerpt","next","previous","description"],"mappings":"kKAkDeA,IA7CK,WAEhB,IAAMC,EAAI,OAqBV,OACI,yBAAKC,UAAU,oBAEVD,EAAKE,kBAAkBC,SAASC,KAAI,SAACD,EAAUE,GAAX,OAEjC,yBAAKJ,UAAU,WAAWK,IAAKD,GAC3B,4BAAKF,EAASI,YAEbJ,EAASK,MAAMJ,KAAI,SAAAK,GAAI,OACpB,wBAAIH,IAAKG,EAAKC,KAAKC,IACf,kBAAC,OAAD,CAAMC,GAAIH,EAAKC,KAAKG,YAAYC,WAAYL,EAAKC,KAAKG,YAAYE,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,iB,gQCqC5HC,EArEF,SAAC,GAUP,IATHF,EASE,EATFA,MACAG,EAQE,EARFA,KAIAf,GAIE,EAPFgB,KAOE,EANFC,QAME,EALFC,IAKE,EAJFlB,UACAmB,EAGE,EAHFA,KACAC,EAEE,EAFFA,aACAC,EACE,EADFA,SAGA,OAAkB,MAAdD,EAEI,6BAAStB,UAAWwB,IAAMhB,MACtB,yBAAKR,UAAWwB,IAAMC,aAClB,yBAAKzB,UAAWwB,IAAME,WAAYZ,EAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAC/E,yBAAKf,UAAWwB,IAAMG,UAAWV,GACjC,yBAAKjB,UAAWwB,IAAMI,SAAU1B,IAGpC,yBAAKF,UAAWwB,IAAMK,aAClB,yBAAKC,wBAAyB,CAAEC,OAAQV,MAE5C,yBAAKrB,UAAWwB,IAAMQ,gBAClB,8BACA,kBAAC,OAAD,CAAMrB,GAAIY,EAASX,YAAYC,WAAYU,EAASX,YAAYE,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAA7G,SAIK,MAAVQ,EAEH,6BAASvB,UAAWwB,IAAMhB,MACtB,yBAAKR,UAAWwB,IAAMC,aAClB,yBAAKzB,UAAWwB,IAAME,WAAYZ,EAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAC/E,yBAAKf,UAAWwB,IAAMG,UAAWV,GACjC,yBAAKjB,UAAWwB,IAAMI,SAAU1B,IAGpC,yBAAKF,UAAWwB,IAAMK,aAClB,yBAAKC,wBAAyB,CAAEC,OAAQV,MAE5C,yBAAKrB,UAAWwB,IAAMQ,gBAClB,kBAAC,OAAD,CAAMrB,GAAIW,EAAaV,YAAYC,WAAnC,KAAuDS,EAAaV,YAAYE,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAC7H,gCAMR,6BAASf,UAAWwB,IAAMhB,MACtB,yBAAKR,UAAWwB,IAAMC,aAClB,yBAAKzB,UAAWwB,IAAME,WAAYZ,EAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAC/E,yBAAKf,UAAWwB,IAAMG,UAAWV,GACjC,yBAAKjB,UAAWwB,IAAMI,SAAU1B,IAGpC,yBAAKF,UAAWwB,IAAMK,aAClB,yBAAKC,wBAAyB,CAAEC,OAAQV,MAE5C,yBAAKrB,UAAWwB,IAAMQ,gBAClB,kBAAC,OAAD,CAAMrB,GAAIW,EAAaV,YAAYC,WAAnC,KAAuDS,EAAaV,YAAYE,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAC7H,kBAAC,OAAD,CAAMJ,GAAIY,EAASX,YAAYC,WAAYU,EAASX,YAAYE,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAA7G,UCnBPkB,G,UAFEC,UApCU,SAAC,GAA2B,IAAzBnC,EAAwB,EAAxBA,KAAMoC,EAAkB,EAAlBA,YAAkB,EAM5CpC,EAAKqC,eANuC,IAE5CxB,YAAeE,EAF6B,EAE7BA,MAAOuB,EAFsB,EAEtBA,QAASxB,EAFa,EAEbA,UAAWO,EAFE,EAEFA,IAAKlB,EAFH,EAEGA,SACtCoC,EAHmC,EAG5CnB,QACAT,EAJ4C,EAI5CA,GACAW,EAL4C,EAK5CA,KAEIkB,EAAmBJ,EAAnBI,KAAMC,EAAaL,EAAbK,SAEd,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK1B,MAAOA,EAAMC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAM0B,YAAaH,IAE1E,yBAAKtC,UAAU,UACX,yBAAKA,UAAU,aACf,kBAAC,EAAD,CACIK,IAAKK,EACLI,MAAOA,EACPG,KAAMoB,EACNnB,KAAML,EAENQ,KAAMA,EACND,IAAKA,EACLlB,SAAUA,EACVoB,aAAckB,EACdjB,SAAUgB,KAGd,yBAAKvC,UAAU,SACX,kBAAC,IAAD,UASE,e","file":"component---src-templates-blog-post-js-287214307f1c1b590785.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nimport \"../styles/projectblogside.scss\"\n\nconst ProjectSide = () => {\n\n    const data = useStaticQuery(graphql`\n    query BlogNavigationQuery {\n        allMarkdownRemark (\n            filter: { frontmatter: { type: {eq: \"post\"} } }\n            sort: { fields: [frontmatter___updated] order: DESC }\n        ) {\n            category:group(field: frontmatter___category) {\n                fieldValue\n                edges {\n                    node {\n                        frontmatter {\n                            title\n                            permalink\n                        }\n                        id\n                    }\n                }\n            }\n        }\n    }`)\n\n    return (\n        <div className=\"blogcategorylist\">\n\n            {data.allMarkdownRemark.category.map((category, index) => (\n\n                <div className=\"category\" key={index}>\n                    <h2>{category.fieldValue}</h2>\n\n                    {category.edges.map(post => (\n                        <h4 key={post.node.id}>\n                            <Link to={post.node.frontmatter.permalink}>{post.node.frontmatter.title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</Link>\n                        </h4>\n                    ))}\n\n                </div>\n                \n            ))}\n\n        </div>\n    )\n}\n\nexport default ProjectSide","import React from 'react'\nimport { Link } from 'gatsby'\n// import Img from 'gatsby-image'\n\nimport style from '../styles/blogpost.module.scss'\n\nconst Post = ({\n    title,\n    date,\n    path,\n    excerpt,\n    tag,\n    category,\n    html,\n    previousPost,\n    nextPost,\n}) => {\n\n    if (previousPost==null) {\n        return (\n            <article className={style.post}>\n                <div className={style.postheading}>\n                    <div className={style.posttitle}>{title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</div>\n                    <div className={style.postdate}>{date}</div>\n                    <div className={style.postcat}>{category}</div>\n                </div>\n\n                <div className={style.postcontent}>\n                    <div dangerouslySetInnerHTML={{ __html: html }} />\n                </div>\n                <div className={style.postnavigation}>\n                    <div></div>\n                    <Link to={nextPost.frontmatter.permalink}>{nextPost.frontmatter.title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}  &raquo;</Link>\n                </div>\n            </article>\n        )\n    } else if (nextPost==null) {\n        return (\n            <article className={style.post}>\n                <div className={style.postheading}>\n                    <div className={style.posttitle}>{title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</div>\n                    <div className={style.postdate}>{date}</div>\n                    <div className={style.postcat}>{category}</div>\n                </div>\n\n                <div className={style.postcontent}>\n                    <div dangerouslySetInnerHTML={{ __html: html }} />\n                </div>\n                <div className={style.postnavigation}>\n                    <Link to={previousPost.frontmatter.permalink}>&laquo; {previousPost.frontmatter.title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</Link>\n                    <div></div>\n                </div>\n            </article>\n        )\n    } else {\n        return (\n            <article className={style.post}>\n                <div className={style.postheading}>\n                    <div className={style.posttitle}>{title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</div>\n                    <div className={style.postdate}>{date}</div>\n                    <div className={style.postcat}>{category}</div>\n                </div>\n    \n                <div className={style.postcontent}>\n                    <div dangerouslySetInnerHTML={{ __html: html }} />\n                </div>\n                <div className={style.postnavigation}>\n                    <Link to={previousPost.frontmatter.permalink}>&laquo; {previousPost.frontmatter.title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}</Link>\n                    <Link to={nextPost.frontmatter.permalink}>{nextPost.frontmatter.title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")}  &raquo;</Link>\n                </div>\n            </article>\n        )\n    }\n}\n\nexport default Post\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout/layout'\nimport BlogSide from \"../components/blogside\"\nimport Post from \"../components/blogpostmodule\"\n\nimport \"../styles/projectbloggrid.scss\"\n\nconst BlogPostTemplate = ({ data, pageContext }) => {\n    const {\n        frontmatter: { title, updated, permalink, tag, category },\n        excerpt: autoExcerpt,\n        id,\n        html,\n    } = data.markdownRemark\n    const { next, previous } = pageContext\n\n    return (\n        <Layout>\n          <SEO title={title.replace(\"&#58;\", \":\").replace(\"&amp;\", \"&\")} description={autoExcerpt} />\n\n            <div className=\"pbgrid\">\n                <div className=\"pbcontent\">\n                <Post\n                    key={id}\n                    title={title}\n                    date={updated}\n                    path={permalink}\n                    // coverImage={coverImage}\n                    html={html}\n                    tag={tag}\n                    category={category}\n                    previousPost={previous}\n                    nextPost={next}\n                />\n                </div>\n                <div className=\"pbnav\">\n                    <BlogSide />\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default BlogPostTemplate\n\nexport const postQuery = graphql `\n    query BlogPostQuery ($path: String) {\n        markdownRemark(frontmatter: { permalink: { eq: $path } }) {\n            frontmatter {\n                title\n                updated(formatString: \"MMMM DD[,] YYYY\")\n                tag\n                category\n                permalink\n            }\n            id\n            html\n            excerpt\n        }\n    }\n`\n"],"sourceRoot":""}